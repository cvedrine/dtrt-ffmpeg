#! /usr/bin/env zsh

# TODO: thumbnails:
# * 20, 50 et 80 et utiliser l'API
# TODO: overview:
# * registrer overview.jpg avec l'API

# TODO: fallback when GPU fail (cuvid and nvenc)
# TODO: add -d arg for output dir
# TODO: scale is a mock
# TODO: the current output_template is insecure
# TODO: -codec:a aac could be replaced by libfdk_aac ???
# (as a backtrick in it or in the file name can have remote code execution )

# steal encoding examples from pod and psm

. dtrt-ffmpeg.zsh

alias l='print -l'

setopt nounset

DEBUG () { print -u2 "$*" }

scaling_args_commons=()

reads () { for it { typeset -g $it; read $it; } }

input () {
    setopt localoptions nowarncreateglobal
    local filename=$1

    typeset -g input_video_is_h264
    typeset -g input=${1?path to the input video}
    typeset -g input_video_codec_name=$( video_info_get $input codec_name )
    typeset -g input_video_width=$( video_info_get $input width )
    typeset -g input_video_height=$( video_info_get $input height )

    # TODO: mieux mais buggÃ©
    # video_info_get $filename width,height,codec_name > EXTR
    # reads input_video_{width,height,codec_name} < EXTR
    #
    #  show me
    # echo input_video_codec_name=$input_video_codec_name
    # echo input_video_width=$input_video_width
    # echo input_video_height=$input_video_height
    # exit
    if [[ h264 = $input_video_codec_name ]] {
        input_video_is_h264=true
    } else { input_video_is_h264=false }
    encoder+=( -i $filename )

}

output () { output_template=${1?template for the path of output file} }

is_downscale () (( input_video_height >= height ))
is_upscale () {
    local tolerance=${1?a tolerance in decimal notation (aka .1 for 10%)}
    (( ( height - input_video_height ) < ( height * tolerance ) )) }

scale () {
    typeset -g width height output
        encostart=( $encoder )
        incr=0
        echo "#!/bin/zsh" > launch.zsh
    for it ($available_sizes) {
        DEBUG "testing size $it"
        width=${it:r} height=${it:e}
        output="$( eval echo $output_template )"

        (( height == 240 )) ||
        is_downscale        ||
        is_upscale .1       ||
        continue

        # TODO:
        # this should be a pre-process parameter or something
        # ... or this should be the output :)
        echo $height $output >> downscaled

        [[ -f $output && $output -nt $input ]] || {
            need_to_encode=true
            scaling_args
            encoder+=( $output )
            echo "for lp in 1" >> launch.zsh
            echo "do" >> launch.zsh
            echo "CUDA_VISIBLE_DEVICES=$incr $encoder" >> launch.zsh
            echo "done &" >> launch.zsh
            if [[ (($incr -eq 1)) || (($incr -eq 3)) ]]
            then
                echo "wait" >> launch.zsh
            fi
            incr=$((incr + 1))
            encoder=( $encostart )
        }
    }
    echo "wait" >> launch.zsh
    zsh ./launch.zsh
}

_rep () { cat <<-SRC
	# need_to_encode $need_to_encode
	# use_gpu $use_gpu
	# use_slurm $use_slurm
	$encoder
	SRC
}

setopt errexit
need_to_encode=false

# TODO : message d'eric: "cannot communicate"

(( $+use_gpu )) || {
    if { which nvidia-smi &> /dev/null &&
            (( $( nvidia-smi -L|wc -l ) ))
    } { use_gpu=true } else { use_gpu=false }
}


if {$use_gpu} {
    # it seems this is not necessary to test the input format anymore
    # because cuvid don't crash with other formats
        # $input_video_is_h264 &&
#    encoder+=( -hwaccel cuvid )
        # -cq 27 had very bad render results
        # -map 0 removed as it crash encodings in some cases
    scaling_args () { encoder+=(
        -gpu 0 -c:v h264_nvenc -qmin 25 -qmax 27 -profile:v high -pixel_format yuv420p -preset fast
        -vf scale=$width\:$height
        -codec:a aac -strict -2 -ar 48000 -ac 2 -b:a 160k
        -movflags faststart
        -y ) }
} else {
    scaling_args () {
        encoder+=(
            $scaling_args_commons
            -pix_fmt yuv420p
            -codec:v libx264 -vf scale=$width\:$height ) } }

# ffprobe_dump_in out/info $input

input ${1?the video to encode}
output '${input:t:r}_${width}x${height}.mp4'
scale always 240 downscale upscale_almost '10%'

_rep > command
#$need_to_encode && $encoder
