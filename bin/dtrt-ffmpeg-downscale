#! /usr/bin/env zsh

# include the file dtrt-ffmpeg.zsh for getting the sizes to encode
. dtrt-ffmpeg.zsh

alias l='print -l'

setopt nounset

DEBUG () { print -u2 "$*" }

scaling_args_commons=()

reads () { for it { typeset -g $it; read $it; } }

input () {
    setopt localoptions nowarncreateglobal
    local filename=$1

    typeset -g input_video_is_h264
    typeset -g input=${1?path to the input video}
    typeset -g input_video_codec_name=$( video_info_get $input codec_name )
    typeset -g input_video_width=$( video_info_get $input width )
    typeset -g input_video_height=$( video_info_get $input height )

    if [[ ((h264 = $input_video_codec_name)) && (($FFMPOD_USECPU = false)) ]] {
        input_video_is_h264=true
        encoder+=( -hwaccel cuvid -c:v h264_cuvid -i $filename )
        scale_defnpp="scale_npp"
        pixfmt="-pixel_format yuv420p"
    } else {
        input_video_is_h264=false
        encoder+=( -i $filename )
        scale_defnpp="scale"
        pixfmt="-pix_fmt yuv420p"
    }
}

output () { output_template=${1?template for the path of output file} }

is_downscale () (( input_video_height >= height ))
is_upscale () {
    local tolerance=${1?a tolerance in decimal notation (aka .1 for 10%)}
    (( ( height - input_video_height ) < ( height * tolerance ) )) }

scale () {
    typeset -g width height output
        encostart=( $encoder )				#Store the beginning of the encode command
        incr=0								#Variable for the selection of the GPU and the number of the stream to encode
        echo "#!/bin/zsh" > launch.zsh		#Create the script which will launch the encoding

# Building of the encoding commands and the file to be launched.
    for it ($available_sizes) {				
        DEBUG "testing size $it"
        width=${it:r} height=${it:e}
        output="$( eval echo $output_template )"

        (( height == 240 )) ||
        is_downscale        ||
        is_upscale .1       ||
        continue

        echo $height $output >> downscaled

        [[ -f $output && $output -nt $input ]] || {
            scaling_args
            encoder+=( $output )
            echo "for lp in 1" >> launch.zsh
            echo "do" >> launch.zsh
            echo "CUDA_VISIBLE_DEVICES=$incr $encoder" >> launch.zsh	#Select the graphic card and write the encoding command in the file
            echo "done &" >> launch.zsh

# The streams are encoded 2x2
# This is due to a commercial limitation in the NVIDIA driver. Only 2 streams can be encoded at the same time even with 4 graphic cards.
# It's because we're using non qualified geforce gaming graphic card and not expensive qualified Quadro or Tesla cards. See nvenc licence for more informations.
            if [[ (($incr -eq 1)) || (($incr -eq 3)) ]]
            then
                echo "wait" >> launch.zsh
            fi
            incr=$((incr + 1))

# we only have 4 graphic cards in a node
            if [[ $incr -eq 4 ]]
            then
            	incr=0
            fi
            encoder=( $encostart )			#Next encoding command
        }
    }
    echo "wait" >> launch.zsh
    zsh ./launch.zsh			#Launch the encoding process
}

setopt errexit

# Verify the presence of a Nvidia GPU
(( $+use_gpu )) || {
    if { which nvidia-smi &> /dev/null &&
            (( $( nvidia-smi -L|wc -l ) ))
    } { use_gpu=true } else { use_gpu=false }
}

# Creation of the ffmpeg command with all the parameters
if {$use_gpu} {
    # Accelerate decoding. Not use for the moment because of limitations due to the format of the input file. The aspect must tested and will be done in the future
        # $input_video_is_h264 &&
	# encoder+=( -hwaccel cuvid )

	# Encoding part of the command ffmpeg
    scaling_args () { encoder+=(
        -c:v h264_nvenc $pixfmt -qmin 25 -qmax 27 -profile:v high -preset fast
        -vf $scale_defnpp=$width\:$height
        -codec:a aac -strict -2 -ar 48000 -ac 2 -b:a 160k
        -movflags faststart
        -y ) }
} else {
    scaling_args () {
        encoder+=(
            $scaling_args_commons
            -pix_fmt yuv420p
            -codec:v libx264 -vf scale=$width\:$height ) } }

input ${1?the video to encode}
output '${input:t:r}_${width}x${height}.mp4'
scale always 240 downscale upscale_almost '10%'
